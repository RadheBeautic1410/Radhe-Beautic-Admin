datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  MOD
  REFERRER
  USER
  SELLER
  UPLOADER
  RESELLER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  TRACKINGPENDING
  DELIVERED
  CANCELLED
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

enum CartStatus {
  PENDING
  ORDERED
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  phoneNumber   String    @unique
  email         String?
  emailVerified DateTime?
  image         String?
  password      String?
  organization  String?
  isVerified    Boolean   @default(false)

  verifiedBy String?   @db.ObjectId
  verifiedAt DateTime?

  role UserRole @default(USER)

  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  verifiedByUser User? @relation("VerifiedBy", fields: [verifiedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)

  verifiedUsers User[]    @relation("VerifiedBy")
  cart          Cart[]
  orders        Orders[]
  Address       Address[]
}

model VerificationToken {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String
  token       String   @unique
  expires     DateTime

  @@unique([phoneNumber, token])
}

model PasswordResetToken {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String
  token       String   @unique
  expires     DateTime

  @@unique([phoneNumber, token])
}

model TwoFactorToken {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String
  token       String   @unique
  expires     DateTime

  @@unique([phoneNumber, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// secret Token

model SecretToken {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  cfUserName    String
  token         String   @unique
  discordId     String
  tokenIssuedAt DateTime @default(now())
  expires       DateTime

  @@unique([cfUserName, token])
}

model Party {
  id                  String @id @default(auto()) @map("_id") @db.ObjectId
  normalizedLowerCase String @unique
  name                String
  countOfPiece        Int    @default(0)
}

model Category {
  id                  String  @id @default(auto()) @map("_id") @db.ObjectId
  normalizedLowerCase String  @unique
  code                String? @unique
  name                String
  type                String?
  countTotal          Int     @default(0)
}

model Prices {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  sellingPrice1 Int     @default(0)
  sellingPrice2 Int     @default(0)
  sellingPrice3 Int     @default(0)
  actualPrice1  Int     @default(0)
  actualPrice2  Int     @default(0)
  actualPrice3  Int     @default(0)
  Kurti         Kurti[]
  Sell          Sell[]
}

model Kurti {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  pricesId        String?  @db.ObjectId
  sizes           Json[]
  reservedSizes   Json[]   @default([])
  party           String
  sellingPrice    String
  actualPrice     String
  category        String
  code            String   @unique
  images          Json[]
  isDeleted       Boolean  @default(false)
  countOfPiece    Int      @default(0)
  lastUpdatedTime DateTime

  prices      Prices?       @relation(fields: [pricesId], references: [id], onDelete: NoAction)
  CartProduct CartProduct[]
  Sell        Sell[]
}

model Sell {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  sellTime   DateTime
  code       String
  kurtiSize  String
  sellerName String
  kurti      Json[]
  kurtiId    String?  @db.ObjectId
  pricesId   String?  @db.ObjectId
  prices     Prices?  @relation(fields: [pricesId], references: [id], onDelete: NoAction)
  kurti2     Kurti?   @relation(fields: [kurtiId], references: [id], onDelete: NoAction)
}

model Deletetime {
  id    String    @id @default(auto()) @map("_id") @db.ObjectId
  owner String    @unique
  time  DateTime?
}

model Cart {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  userId      String        @unique @db.ObjectId
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  CartProduct CartProduct[]
  orders      Orders[]
  isOrdered   CartStatus    @default(PENDING)
}

model CartProduct {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  kurtiId        String  @db.ObjectId
  kurti          Kurti   @relation(fields: [kurtiId], references: [id], onDelete: Cascade)
  sizes          Json[]
  isRejected     Boolean @default(false)
  adminSideSizes Json[]
  scannedSizes   Json[]
  Cart           Cart?   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId         String? @db.ObjectId
}

model Orders {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  orderId          String      @unique
  cart             Cart        @relation(fields: [cartId], references: [id])
  cartId           String      @db.ObjectId
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String      @db.ObjectId
  date             DateTime    @default(now())
  trackingIdImages Json[]
  status           OrderStatus @default(PENDING)
  total            Int
  shippingAddress  Address     @relation(fields: [addressId], references: [id])
  shippingCharge   Int         @default(0)
  addressId        String      @db.ObjectId
  trackingId       String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model Address {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String   @db.ObjectId
  address String
  zipCode String?
  orders  Orders[]
}

model OrderCounter {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  date     String @unique
  sequence Int
}
