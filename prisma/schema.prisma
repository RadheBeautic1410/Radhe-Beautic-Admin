datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  MOD
  REFERRER
  USER
  SELLER
  UPLOADER
  RESELLER
  SHOP_SELLER
  SELLER_MANAGER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  TRACKINGPENDING
  DELIVERED
  CANCELLED
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

enum CartStatus {
  PENDING
  ORDERED
}

enum OfflineSellType {
  HALL_SELL_OFFLINE
  SHOP_SELL_OFFLINE
  HALL_SELL_ONLINE
}

enum OnlineSellType {
  HALL_SELL_ONLINE
  SHOP_SELL_ONLINE
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  phoneNumber   String    @unique
  email         String?
  emailVerified DateTime?
  image         String?
  password      String?
  organization  String?
  isVerified    Boolean   @default(false)

  verifiedBy String?   @db.ObjectId
  verifiedAt DateTime?

  role UserRole @default(USER)

  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  verifiedByUser User? @relation("VerifiedBy", fields: [verifiedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)

  verifiedUsers User[]    @relation("VerifiedBy")
  cart          Cart[]
  orders        Orders[]
  Address       Address[]
  shop          Shop?     @relation("ShopOwner")
}

model VerificationToken {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String
  token       String   @unique
  expires     DateTime

  @@unique([phoneNumber, token])
}

model PasswordResetToken {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String
  token       String   @unique
  expires     DateTime

  @@unique([phoneNumber, token])
}

model TwoFactorToken {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String
  token       String   @unique
  expires     DateTime

  @@unique([phoneNumber, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// secret Token

model SecretToken {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  cfUserName    String
  token         String   @unique
  discordId     String
  tokenIssuedAt DateTime @default(now())
  expires       DateTime

  @@unique([cfUserName, token])
}

model Party {
  id                  String @id @default(auto()) @map("_id") @db.ObjectId
  normalizedLowerCase String @unique
  name                String
  countOfPiece        Int    @default(0)
}

model Category {
  id                  String  @id @default(auto()) @map("_id") @db.ObjectId
  normalizedLowerCase String  @unique
  code                String? @unique
  name                String
  type                String?
  image               String?
  countTotal          Int     @default(0)
  totalItems          Int     @default(0)
  isDeleted           Boolean @default(false)
  bigPrice            Float?
  walletDiscount      Int?    @default(0)
  sellingPrice        Float?
  actualPrice         Float?
  isStockReady        Boolean @default(true)
}

model Prices {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  sellingPrice1 Int           @default(0)
  sellingPrice2 Int           @default(0)
  sellingPrice3 Int           @default(0)
  actualPrice1  Int           @default(0)
  actualPrice2  Int           @default(0)
  actualPrice3  Int           @default(0)
  Kurti         Kurti[]
  Sell          Sell[]
  OfflineSell   OfflineSell[]
  OnlineSell    OnlineSell[]
}

model Kurti {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  pricesId        String?  @db.ObjectId
  sizes           Json[]
  reservedSizes   Json[]   @default([])
  party           String
  sellingPrice    String
  actualPrice     String
  category        String
  code            String   @unique
  images          Json[]
  isDeleted       Boolean  @default(false)
  countOfPiece    Int      @default(0)
  lastUpdatedTime DateTime
  videos          Json[]
  isBigPrice      Boolean  @default(false)
  bigPrice        Float?

  prices            Prices?             @relation(fields: [pricesId], references: [id], onDelete: NoAction)
  CartProduct       CartProduct[]
  Sell              Sell[]
  MovedKurtiHistory MovedKurtiHistory[]
  TopSoldKurti      TopSoldKurti?
  OfflineSell       OfflineSell[]
  OnlineSell        OnlineSell[]
}

model Sell {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  sellTime      DateTime
  code          String
  kurtiSize     String
  sellerName    String
  kurti         Json[]
  kurtiId       String?    @db.ObjectId
  pricesId      String?    @db.ObjectId
  prices        Prices?    @relation(fields: [pricesId], references: [id], onDelete: NoAction)
  kurti2        Kurti?     @relation(fields: [kurtiId], references: [id], onDelete: NoAction)
  shopLocation  String? // Location of the shop
  customerName  String? // Customer name
  customerPhone String? // Customer phone (optional)
  selledPrice   Int? // Actual selling price (can be different from MRP)
  invoiceNumber String? // Invoice number for tracking
  quantity      Int?
  shopName      String?
  paymentType   String?
  billCreatedBy String?
  batchId       String? // Reference to SaleBatch
  batch         SaleBatch? @relation("BatchSales", fields: [batchId], references: [id])

  @@map("Sell")
}

// If you need to create a separate table for batch sales (optional)
model SaleBatch {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  batchNumber   String   @unique // Unique batch identifier
  customerName  String
  customerPhone String?
  shopLocation  String
  shopName      String
  billCreatedBy String
  totalAmount   Int // Total amount for the entire batch
  totalItems    Int // Total number of items in batch
  saleTime      DateTime
  sellerName    String
  sellerId      String?

  // Relations
  sales Sell[] @relation("BatchSales")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sale_batches")
}

model OfflineSellBatch {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  batchNumber   String          @unique
  customerName  String
  customerPhone String?
  billCreatedBy String
  totalAmount   Int
  totalItems    Int
  saleTime      DateTime
  sellerName    String
  invoiceNumber Int?
  invoiceUrl    String?
  sellType      OfflineSellType @default(SHOP_SELL_OFFLINE)
  sales         OfflineSell[]   @relation("OfflineBatchSales")
  shopId        String?         @db.ObjectId
  shop          Shop?           @relation(fields: [shopId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  paymentType String?
  gstType     String?
  Orders      Orders? @relation(fields: [ordersId], references: [id])
  ordersId    String? @db.ObjectId

  @@map("offline_sale_batches")
}

model OfflineSell {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  sellTime      DateTime
  code          String
  kurtiSize     String
  kurtiId       String           @db.ObjectId
  kurti         Kurti            @relation(fields: [kurtiId], references: [id])
  batchId       String           @db.ObjectId
  batch         OfflineSellBatch @relation("OfflineBatchSales", fields: [batchId], references: [id])
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  pricesId      String?          @db.ObjectId
  prices        Prices?          @relation(fields: [pricesId], references: [id], onDelete: NoAction)
  shopLocation  String?
  customerName  String?
  customerPhone String?
  quantity      Int?
  selledPrice   Int?
}

model OnlineSellBatch {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  batchNumber   String          @unique
  customerName  String
  customerPhone String?
  billCreatedBy String
  totalAmount   Int
  totalItems    Int
  saleTime      DateTime
  sellerName    String
  invoiceNumber Int?
  invoiceUrl    String?
  sellType      OnlineSellType @default(HALL_SELL_ONLINE)
  sales         OnlineSell[]    @relation("OnlineBatchSales")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  paymentType String?
  gstType     String?

  orderId String?
  order   Orders? @relation(fields: [orderId], references: [orderId])

  @@map("online_sale_batches")
}

model OnlineSell {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  sellTime      DateTime
  code          String
  kurtiSize     String
  kurtiId       String          @db.ObjectId
  kurti         Kurti           @relation(fields: [kurtiId], references: [id])
  batchId       String          @db.ObjectId
  batch         OnlineSellBatch @relation("OnlineBatchSales", fields: [batchId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  pricesId      String?         @db.ObjectId
  prices        Prices?         @relation(fields: [pricesId], references: [id], onDelete: NoAction)
  shopLocation  String?
  customerName  String?
  customerPhone String?
  quantity      Int?
  selledPrice   Int?
}

model Deletetime {
  id    String    @id @default(auto()) @map("_id") @db.ObjectId
  owner String    @unique
  time  DateTime?
}

model Cart {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  userId      String        @db.ObjectId
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  CartProduct CartProduct[]
  orders      Orders[]
  isOrdered   CartStatus    @default(PENDING)
}

model CartProduct {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  kurtiId        String  @db.ObjectId
  kurti          Kurti   @relation(fields: [kurtiId], references: [id], onDelete: Cascade)
  sizes          Json[]
  isRejected     Boolean @default(false)
  adminSideSizes Json[]
  scannedSizes   Json[]
  Cart           Cart?   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId         String? @db.ObjectId
}

model Orders {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  orderId          String             @unique
  cart             Cart               @relation(fields: [cartId], references: [id])
  cartId           String             @db.ObjectId
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String             @db.ObjectId
  date             DateTime           @default(now())
  trackingIdImages Json[]
  status           OrderStatus        @default(PENDING)
  total            Int
  shippingAddress  Address            @relation(fields: [addressId], references: [id])
  shippingCharge   Int                @default(0)
  addressId        String             @db.ObjectId
  trackingId       String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  OfflineSellBatch OfflineSellBatch[]
  OnlineSellBatch  OnlineSellBatch[]
}

model Address {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String   @db.ObjectId
  address String
  zipCode String?
  orders  Orders[]
}

model OrderCounter {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  date     String @unique
  sequence Int
}

model MovedKurtiHistory {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  kurtiId      String   @db.ObjectId
  kurti        Kurti    @relation(fields: [kurtiId], references: [id], onDelete: Cascade)
  fromCategory String
  toCategory   String
  oldKurtiCode String
  newKurtiCode String
  sizes        Json[]
  date         DateTime @default(now())
}

model TopSoldKurti {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  kurtiId   String   @unique
  kurti     Kurti    @relation(fields: [kurtiId], references: [id])
  soldCount Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shop {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  shopName         String
  shopLocation     String
  shopAddress      String?
  ownerId          String?            @unique @db.ObjectId
  owner            User?              @relation("ShopOwner", fields: [ownerId], references: [id])
  OfflineSellBatch OfflineSellBatch[]
  isHallSell       Boolean            @default(false)
}
